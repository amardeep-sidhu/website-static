<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Performance on amardeepsidhu.com</title><link>https://amardeepsidhu.com/tags/performance/</link><description>Recent content in Performance on amardeepsidhu.com</description><generator>Hugo -- 0.147.9</generator><language>en</language><lastBuildDate>Mon, 28 Jul 2025 08:50:12 +0530</lastBuildDate><atom:link href="https://amardeepsidhu.com/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL Performance - Tune It or Buy It ?</title><link>https://amardeepsidhu.com/blog/2025/07/sql-performance-tune-it-or-buy-it/</link><pubDate>Mon, 28 Jul 2025 08:50:12 +0530</pubDate><guid>https://amardeepsidhu.com/blog/2025/07/sql-performance-tune-it-or-buy-it/</guid><description>&lt;p>I was thinking about this while sitting in &lt;a href="https://viveklsharma.wordpress.com/">Vivek&lt;/a>&amp;rsquo;s session at &lt;a href="https://www.aioug.org/ocyatra/2025">OCYatra&lt;/a> in Gurgaon. He was talking about the techniques one can use to optimize badly performing SQLs. But there does exist the other side of this story i.e. throwing hardware at a performance problem to fix it. Of course, it works till a point only and it can&amp;rsquo;t solve every damn performance problem out there. But it is relatively easier to do (costs money, though) and depending upon where you are hosting your workloads, can be quicker too. You see CPU usage going up or users complaining, simple thing to do is to throw more cores at the database. If the system is CPU starved, it is going to give some temporary relief and you can control the situation. Same can be the case with the storage IOPS. In some extreme cases, you could even migrate the database to a more powerful hardware. With systems like Exadata being around which can make even a bad SQL do fairly well, this lever becomes even more powerful. But is it sustainable or is it the right way to deal with these kind of issues?&lt;/p></description></item><item><title>Database performance degradation due to multipath issues</title><link>https://amardeepsidhu.com/blog/2021/03/database-performance-degradation-due-to-multipath-issues/</link><pubDate>Mon, 22 Mar 2021 12:54:19 +0530</pubDate><guid>https://amardeepsidhu.com/blog/2021/03/database-performance-degradation-due-to-multipath-issues/</guid><description>&lt;p>To put it in bit of an Indian context, database is not your daughter-in-law that you can blame it for every performance issue that occurs in the environment. But it does happen. Most of the time it is the database that is blamed for all such issues. Many times, the issues are in some other layer like OS, network or storage.&lt;/p>
&lt;p>Faced this issue recently at one of the customer sites where performance in one of the databases went down suddenly. It was a 2 node RAC on 12.1.0.2 running on Linux 7 using some kind of Hitachi SSD storage array. There were no changes as per DBA, application, OS and storage teams. But something must have changed somewhere. Otherwise why would performance degrade just like that. I &amp;amp; my colleague checked some details and found that something happened in the morning a day before. Starting from that point in time, the execution time for all the commonly run queries shot up. Generally speaking, when all the queries are doing bad and you are sure that nothing has been changed on the database side, the reasons could be outside the database. But being a DBA, it is not easy to prove that. We took AWRs from good and bad times and the wait events section looked like this:&lt;/p></description></item><item><title>Tuning GoldenGate Extract Pump performance</title><link>https://amardeepsidhu.com/blog/2012/05/tuning-goldengate-extract-pump-performance/</link><pubDate>Fri, 25 May 2012 20:38:18 +0530</pubDate><guid>https://amardeepsidhu.com/blog/2012/05/tuning-goldengate-extract-pump-performance/</guid><description>&lt;p>Just a quick note/post about the significance of COMPRESS and TCPBUFSIZE parameter in performance of a GoldenGate Extract Pump process. COMPRESS helps in compressing the outgoing blocks hence helping in better utilization of the bandwidth from source to target. GG is going to uncompress the blocks before writing them to the remote trail file on the target. Compression ratios of 4:1 or better can be achieved. Of course, use of COMPRESS may result in increased CPU usage on both the sides.&lt;/p></description></item></channel></rss>